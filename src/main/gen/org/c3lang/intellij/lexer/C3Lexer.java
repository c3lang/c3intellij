// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/org/c3lang/intellij/C3.flex

package org.c3lang.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import org.c3lang.intellij.C3ParserDefinition;
import org.c3lang.intellij.psi.C3Types;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


class C3Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int IN_DOC_COMMENT = 6;
  public static final int IN_STRING = 8;
  public static final int IN_CHAR = 10;
  public static final int IN_BYTES_STRING = 12;
  public static final int IN_BYTES_CHAR = 14;
  public static final int IN_BYTES_RAW_STRING = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\32\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\45\1\47\1\50\5\51\1\52\2\51\1\53"+
    "\1\54\3\51\1\55\1\56\2\51\1\57\2\51\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\6\124\1\125\u01a2\124\2\125\326\124"+
    "\u0100\125";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\1\30\1\31\1\32\1\33\1\34\22\35"+
    "\1\36\1\37\1\40\1\41\4\42\1\43\1\44\3\45"+
    "\1\46\1\43\1\44\1\1\1\43\1\47\1\43\1\50"+
    "\1\43\2\50\1\51\1\52\1\1\1\0\1\53\1\0"+
    "\1\54\1\55\1\56\1\0\14\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\3\0\1\20\1\0\1\20\2\0\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\1\1\0\1\107\1\110\1\111\1\112\1\0"+
    "\15\35\1\113\5\35\1\114\2\35\1\115\30\35\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\3\0"+
    "\1\126\1\127\1\130\14\57\1\131\11\57\1\132\1\133"+
    "\1\134\1\135\1\20\1\0\1\135\3\20\1\136\1\137"+
    "\1\140\1\141\1\35\1\142\1\143\22\35\1\144\3\35"+
    "\1\145\1\35\1\146\14\35\1\147\6\35\1\150\1\151"+
    "\2\35\1\152\13\57\1\153\15\57\1\135\5\0\5\35"+
    "\1\154\1\35\1\155\1\35\1\156\5\35\1\157\1\160"+
    "\12\35\1\161\1\162\3\35\1\163\6\35\1\164\1\35"+
    "\1\165\2\35\1\166\1\35\1\167\1\35\2\57\1\170"+
    "\2\57\1\171\1\172\4\57\1\173\20\57\3\0\1\135"+
    "\1\0\1\174\4\35\1\175\1\176\1\177\2\35\1\200"+
    "\2\35\1\201\1\202\1\203\1\35\1\204\4\35\1\205"+
    "\3\35\1\206\7\35\1\207\1\210\1\35\1\211\5\57"+
    "\1\212\1\57\1\213\15\57\1\214\5\57\2\0\1\215"+
    "\5\35\1\216\1\217\3\35\1\220\1\221\1\222\1\35"+
    "\1\223\1\35\1\224\1\225\1\226\1\227\1\230\1\35"+
    "\1\231\1\35\1\232\1\57\1\233\2\57\1\234\7\57"+
    "\1\235\1\57\1\236\1\57\1\237\1\57\1\56\2\57"+
    "\1\240\1\57\1\241\1\242\3\35\1\243\2\35\1\244"+
    "\1\245\2\35\1\246\1\247\1\250\1\251\1\252\4\57"+
    "\1\253\1\254\1\255\1\57\1\256\2\57\1\257\1\260"+
    "\1\261\1\262\1\35\1\263\1\264\1\265\2\35\1\266"+
    "\2\57\1\267\1\57\1\270\1\57\1\54\1\271\1\272"+
    "\1\273\1\57\1\274\1\275\1\276\1\277";

  private static int [] zzUnpackAction() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0306\0\u0408\0\u045e\0\u04b4"+
    "\0\u050a\0\u0306\0\u0306\0\u0306\0\u0560\0\u05b6\0\u0306\0\u060c"+
    "\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba\0\u0306\0\u0810\0\u0866"+
    "\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0306\0\u0a6a\0\u0ac0"+
    "\0\u0306\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a"+
    "\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca"+
    "\0\u1020\0\u1076\0\u10cc\0\u0306\0\u1122\0\u0306\0\u0306\0\u1178"+
    "\0\u0306\0\u11ce\0\u1224\0\u0306\0\u127a\0\u12d0\0\u0306\0\u1326"+
    "\0\u0306\0\u137c\0\u0306\0\u13d2\0\u1428\0\u0306\0\u147e\0\u14d4"+
    "\0\u152a\0\u1580\0\u15d6\0\u0306\0\u0306\0\u162c\0\u0408\0\u1682"+
    "\0\u16d8\0\u0306\0\u172e\0\u172e\0\u1784\0\u17da\0\u1830\0\u1886"+
    "\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36"+
    "\0\u1b8c\0\u0306\0\u1be2\0\u0306\0\u0306\0\u1c38\0\u0306\0\u0306"+
    "\0\u0306\0\u1c8e\0\u0306\0\u1ce4\0\u0306\0\u1d3a\0\u1d90\0\u1de6"+
    "\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u0306\0\u0306\0\u1fea"+
    "\0\u0306\0\u0306\0\u0306\0\u0306\0\u2040\0\u0306\0\u0306\0\u2096"+
    "\0\u20ec\0\u0968\0\u2142\0\u2198\0\u0306\0\u0306\0\u0ac0\0\u21ee"+
    "\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e"+
    "\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e"+
    "\0\u27a4\0\u27fa\0\u0d1a\0\u2850\0\u28a6\0\u0d1a\0\u28fc\0\u2952"+
    "\0\u29a8\0\u29fe\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02"+
    "\0\u2c58\0\u2cae\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2"+
    "\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6\0\u0306\0\u0306"+
    "\0\u0306\0\u0306\0\u310c\0\u0306\0\u0306\0\u0306\0\u14d4\0\u1580"+
    "\0\u15d6\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba\0\u3310\0\u3366"+
    "\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616"+
    "\0\u1830\0\u366c\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u381a\0\u3870"+
    "\0\u38c6\0\u391c\0\u0306\0\u0306\0\u0306\0\u3972\0\u39c8\0\u3a1e"+
    "\0\u3a74\0\u0306\0\u3aca\0\u3b20\0\u0306\0\u0306\0\u0306\0\u3b76"+
    "\0\u3bcc\0\u0d1a\0\u0d1a\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a"+
    "\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u402a"+
    "\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da"+
    "\0\u4330\0\u4386\0\u43dc\0\u0d1a\0\u4432\0\u4488\0\u44de\0\u4534"+
    "\0\u458a\0\u45e0\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e\0\u47e4"+
    "\0\u0d1a\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u0d1a"+
    "\0\u0d1a\0\u4a3e\0\u4a94\0\u0306\0\u4aea\0\u4b40\0\u4b96\0\u4bec"+
    "\0\u4c42\0\u4c98\0\u4cee\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c"+
    "\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c"+
    "\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u53fc"+
    "\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac"+
    "\0\u0d1a\0\u5702\0\u0d1a\0\u5758\0\u0d1a\0\u57ae\0\u5804\0\u585a"+
    "\0\u58b0\0\u5906\0\u0d1a\0\u0d1a\0\u595c\0\u59b2\0\u5a08\0\u5a5e"+
    "\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u0d1a\0\u0d1a"+
    "\0\u5cb8\0\u5d0e\0\u5d64\0\u0d1a\0\u5dba\0\u5e10\0\u5e66\0\u5ebc"+
    "\0\u5f12\0\u5f68\0\u0d1a\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u0d1a"+
    "\0\u6116\0\u0d1a\0\u616c\0\u61c2\0\u6218\0\u1830\0\u626e\0\u62c4"+
    "\0\u1830\0\u1830\0\u631a\0\u6370\0\u63c6\0\u641c\0\u6472\0\u64c8"+
    "\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778"+
    "\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2\0\u6a28"+
    "\0\u6a7e\0\u6ad4\0\u0306\0\u6b2a\0\u0d1a\0\u6b80\0\u6bd6\0\u6c2c"+
    "\0\u6c82\0\u0d1a\0\u0d1a\0\u0d1a\0\u6cd8\0\u6d2e\0\u0d1a\0\u6d84"+
    "\0\u6dda\0\u0d1a\0\u6e30\0\u6e86\0\u6edc\0\u0d1a\0\u6f32\0\u6f88"+
    "\0\u6fde\0\u7034\0\u0d1a\0\u708a\0\u70e0\0\u7136\0\u0d1a\0\u718c"+
    "\0\u71e2\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390\0\u0d1a\0\u0d1a"+
    "\0\u73e6\0\u0d1a\0\u743c\0\u7492\0\u74e8\0\u753e\0\u7594\0\u1830"+
    "\0\u75ea\0\u1830\0\u7640\0\u7696\0\u76ec\0\u7742\0\u7798\0\u77ee"+
    "\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2\0\u7a48\0\u1830"+
    "\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2\0\u0d1a"+
    "\0\u7cf8\0\u7d4e\0\u7da4\0\u7dfa\0\u7e50\0\u0d1a\0\u0d1a\0\u7ea6"+
    "\0\u7efc\0\u7f52\0\u0d1a\0\u0d1a\0\u0d1a\0\u7fa8\0\u0d1a\0\u7ffe"+
    "\0\u0d1a\0\u0d1a\0\u0d1a\0\u0d1a\0\u0d1a\0\u8054\0\u0d1a\0\u80aa"+
    "\0\u0d1a\0\u8100\0\u1830\0\u8156\0\u81ac\0\u8202\0\u8258\0\u82ae"+
    "\0\u8304\0\u835a\0\u83b0\0\u8406\0\u845c\0\u1830\0\u84b2\0\u1830"+
    "\0\u8508\0\u1830\0\u855e\0\u1830\0\u85b4\0\u860a\0\u1830\0\u8660"+
    "\0\u1830\0\u0d1a\0\u86b6\0\u870c\0\u8762\0\u0d1a\0\u87b8\0\u880e"+
    "\0\u0d1a\0\u8864\0\u88ba\0\u8910\0\u0d1a\0\u0d1a\0\u1830\0\u1830"+
    "\0\u1830\0\u8966\0\u89bc\0\u8a12\0\u8a68\0\u1830\0\u1830\0\u1830"+
    "\0\u8abe\0\u1830\0\u8b14\0\u8b6a\0\u1830\0\u1830\0\u1830\0\u0d1a"+
    "\0\u8bc0\0\u0d1a\0\u0d1a\0\u0d1a\0\u8c16\0\u8c6c\0\u0d1a\0\u8cc2"+
    "\0\u8d18\0\u1830\0\u8d6e\0\u1830\0\u8dc4\0\u1830\0\u0d1a\0\u0d1a"+
    "\0\u0d1a\0\u8e1a\0\u1830\0\u1830\0\u1830\0\u1830";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\3\13\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\10\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\13\44\1\45\1\12\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\2\60\1\61\2\60\1\62\1\63\1\64\3\60"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\2\60"+
    "\1\74\1\75\1\76\1\77\2\12\2\100\1\101\14\100"+
    "\1\102\4\100\1\103\101\100\3\104\1\12\61\104\1\105"+
    "\37\104\1\12\2\106\1\107\14\106\1\110\106\106\2\12"+
    "\1\111\1\12\1\111\2\112\1\113\51\112\1\114\44\112"+
    "\2\12\1\111\1\12\1\111\7\115\1\116\44\115\1\114"+
    "\44\115\2\12\1\111\1\12\1\111\2\117\1\120\116\117"+
    "\2\12\1\111\1\12\1\111\7\121\1\122\111\121\3\104"+
    "\1\12\61\104\1\123\37\104\1\12\127\0\3\13\1\0"+
    "\1\13\126\0\1\124\32\0\1\125\131\0\13\126\4\0"+
    "\1\127\1\0\32\130\17\0\1\131\2\0\1\132\30\0"+
    "\10\133\1\134\2\133\4\0\1\135\1\0\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\2\137\1\144\4\137\1\145"+
    "\2\137\1\146\1\137\1\147\1\150\1\137\1\151\4\137"+
    "\47\0\1\152\77\0\1\153\25\0\1\154\125\0\1\155"+
    "\104\0\1\156\20\0\1\157\106\0\1\160\16\0\1\161"+
    "\1\12\106\0\1\162\121\0\1\163\4\0\1\164\14\0"+
    "\1\165\107\0\1\166\1\0\11\34\10\0\1\167\1\170"+
    "\2\0\1\171\1\172\2\0\1\173\1\174\4\0\1\175"+
    "\2\0\1\167\2\0\1\170\6\0\1\171\2\0\1\172"+
    "\5\0\1\173\2\0\1\174\33\0\1\166\1\0\11\34"+
    "\11\0\1\170\2\0\1\171\3\0\1\173\5\0\1\175"+
    "\5\0\1\170\6\0\1\171\10\0\1\173\51\0\1\176"+
    "\106\0\1\177\20\0\1\200\1\201\125\0\1\202\1\203"+
    "\124\0\1\204\1\205\17\0\1\206\101\0\1\207\4\0"+
    "\1\210\127\0\13\211\4\0\1\212\1\0\32\213\33\0"+
    "\11\44\7\0\13\44\4\0\1\44\1\0\32\214\46\0"+
    "\1\215\126\0\1\216\131\0\13\44\4\0\1\217\1\0"+
    "\32\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\13\60\1\220\1\60\1\221\4\60\1\222\1\223\6\60"+
    "\33\0\6\60\1\224\2\60\7\0\13\60\4\0\1\60"+
    "\1\0\5\60\1\225\2\60\1\226\5\60\1\227\2\60"+
    "\1\230\10\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\1\231\6\60\1\232\6\60\1\233\13\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\4\60\1\234"+
    "\11\60\1\235\13\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\13\60\1\236\1\60\1\237\11\60\1\240"+
    "\2\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\1\241\12\60\1\242\1\60\1\243\1\244\13\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\32\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\2\60\1\245"+
    "\2\60\1\246\6\60\1\247\1\250\1\60\1\251\2\60"+
    "\1\252\7\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\16\60\1\253\13\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\1\254\15\60\1\255\13\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\4\60\1\256"+
    "\17\60\1\257\5\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\4\60\1\260\25\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\7\60\1\261\13\60\1\262"+
    "\2\60\1\263\3\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\13\60\1\264\5\60\1\265\6\60\1\266"+
    "\1\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\10\60\1\267\2\60\1\270\1\60\1\271\1\60\1\272"+
    "\2\60\1\273\7\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\1\274\15\60\1\275\13\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\7\60\1\276\22\60"+
    "\15\0\1\277\4\0\1\300\10\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\301\32\60\47\0\1\302\57\0\1\303"+
    "\4\0\2\100\1\0\14\100\1\0\4\100\1\0\101\100"+
    "\24\0\1\304\120\0\1\305\173\0\1\104\40\0\2\106"+
    "\1\0\14\106\1\0\106\106\42\0\1\306\70\0\2\112"+
    "\1\0\51\112\1\0\44\112\5\0\121\104\5\0\7\115"+
    "\1\0\44\115\1\0\44\115\5\0\2\117\1\0\116\117"+
    "\1\0\5\307\1\0\1\104\123\0\7\121\1\0\111\121"+
    "\1\0\5\310\6\0\1\104\112\0\5\311\57\0\1\104"+
    "\65\0\11\126\7\0\13\126\4\0\1\126\1\0\32\126"+
    "\33\0\11\130\7\0\13\130\4\0\1\130\1\0\32\130"+
    "\53\0\13\312\4\0\1\131\1\0\32\313\33\0\11\133"+
    "\7\0\13\133\4\0\1\133\1\0\32\314\53\0\13\133"+
    "\4\0\1\135\1\0\32\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\13\137\1\315\6\137\1\316\7\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\32\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\1\317"+
    "\31\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\4\137\1\320\25\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\2\137\1\321\10\137\1\322\1\137\1\323"+
    "\3\137\1\324\3\137\1\325\1\137\1\326\2\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\4\137\1\327"+
    "\11\137\1\330\13\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\5\137\1\331\7\137\1\332\4\137\1\333"+
    "\7\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\1\334\31\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\15\137\1\335\14\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\10\137\1\336\12\137\1\337\2\137"+
    "\1\340\3\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\30\137\1\341\1\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\1\342\31\137\21\0\1\343\132\0"+
    "\1\344\130\0\1\345\102\0\2\164\3\0\120\164\26\0"+
    "\11\346\115\0\2\347\117\0\1\350\1\0\1\350\2\0"+
    "\11\351\142\0\1\352\26\0\1\352\51\0\7\353\144\0"+
    "\1\171\26\0\1\171\51\0\11\354\7\0\4\354\15\0"+
    "\6\354\57\0\11\34\26\0\1\175\102\0\1\355\125\0"+
    "\1\356\127\0\1\357\107\0\11\211\7\0\13\211\4\0"+
    "\1\211\1\0\32\360\33\0\11\213\7\0\13\213\4\0"+
    "\1\213\1\0\32\213\33\0\11\214\7\0\13\214\4\0"+
    "\1\214\1\0\32\214\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\10\60\1\361\21\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\30\60\1\362\1\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\14\60\1\363"+
    "\5\60\1\364\7\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\23\60\1\365\6\60\33\0\4\60\1\73"+
    "\4\60\7\0\13\60\4\0\1\60\1\0\32\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\13\60\1\366"+
    "\16\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\23\60\1\367\6\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\16\60\1\370\13\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\4\60\1\371\25\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\22\60\1\372"+
    "\1\373\6\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\1\374\31\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\15\60\1\375\14\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\5\60\1\376\24\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\24\60\1\377"+
    "\5\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\22\60\1\u0100\7\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\24\60\1\u0101\5\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\23\60\1\u0102\6\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\13\60\1\u0103"+
    "\10\60\1\u0104\5\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\16\60\1\u0105\13\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\21\60\1\u0106\10\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\7\60\1\u0107"+
    "\22\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\17\60\1\u0108\12\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\13\60\1\u0109\7\60\1\u010a\6\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\23\60\1\u010b"+
    "\6\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\31\60\1\u010c\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\15\60\1\u010d\14\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\2\60\1\u010e\27\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\3\60\1\u010f\26\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\27\60"+
    "\1\u0110\2\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\13\60\1\u0111\16\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\23\60\1\u0112\6\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\16\60\1\u0113\13\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\1\u0114"+
    "\20\60\1\u0115\10\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\10\60\1\u0116\21\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\16\60\1\u0117\13\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\24\60\1\u0118"+
    "\3\60\1\u0119\1\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\17\60\1\u011a\12\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\15\60\1\u011b\14\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\16\60\1\u011c"+
    "\13\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\10\60\1\u011d\21\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\23\60\1\u011e\6\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\7\60\1\u011f\21\60\1\u0120"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\21\60"+
    "\1\u0121\10\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\10\60\1\u0122\21\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\10\60\1\u0123\21\60\127\0\1\u0124"+
    "\31\0\11\312\7\0\13\312\4\0\1\312\66\0\11\313"+
    "\7\0\13\313\4\0\1\313\1\0\32\313\33\0\11\314"+
    "\7\0\13\314\4\0\1\314\1\0\32\314\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\10\137\1\u0125\21\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\22\137"+
    "\1\u0126\7\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\22\137\1\u0127\7\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\5\137\1\u0128\24\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\7\137\1\u0129\22\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\22\137"+
    "\1\u012a\7\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\3\137\1\u012b\26\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\21\137\1\u012c\10\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\1\u012d\31\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\23\137\1\u012e"+
    "\6\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\1\u012f\31\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\21\137\1\u0130\10\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\2\137\1\u0131\27\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\u0132\1\0\32\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\14\137\1\u0133\15\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\1\u0134"+
    "\31\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\31\137\1\u0135\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\21\137\1\u0136\10\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\10\137\1\u0137\21\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\17\137\1\u0138\12\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\1\u0139"+
    "\1\137\1\u013a\1\137\1\u013b\15\137\1\u013c\1\u013d\6\137"+
    "\33\0\11\346\11\0\1\170\1\u013e\13\0\1\u013f\5\0"+
    "\1\170\1\u013e\57\0\2\347\23\0\1\171\3\0\1\173"+
    "\5\0\1\u0140\14\0\1\171\10\0\1\173\40\0\11\351"+
    "\115\0\11\351\12\0\1\u013e\22\0\1\u013e\57\0\7\353"+
    "\16\0\1\171\3\0\1\173\5\0\1\u0141\14\0\1\171"+
    "\10\0\1\173\36\0\1\u0142\1\0\11\354\7\0\4\354"+
    "\1\0\1\171\1\0\1\170\1\0\1\173\5\0\1\u0143"+
    "\1\0\6\354\5\0\1\171\3\0\1\170\4\0\1\173"+
    "\40\0\11\360\7\0\13\360\4\0\1\360\1\0\32\360"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\1\u0144"+
    "\31\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\4\60\1\u0145\25\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\21\60\1\u0146\10\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\16\60\1\u0147\13\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\22\60\1\u0148"+
    "\7\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\13\60\1\u0149\16\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\1\u014a\31\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\4\60\1\u014b\25\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\2\60\1\u014c\27\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\21\60"+
    "\1\u014d\10\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\22\60\1\u014e\1\u014f\6\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\1\u0150\3\60\1\u0151\25\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\1\60"+
    "\1\u0152\30\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\4\60\1\u0153\25\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\14\60\1\u0154\15\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\4\60\1\u0155\25\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\22\60"+
    "\1\u0156\7\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\13\60\1\u0157\16\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\1\u0158\31\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\4\60\1\u0159\25\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\1\u015a\31\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\16\60"+
    "\1\u015b\13\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\10\60\1\u015c\21\60\33\0\1\60\1\u015d\7\60"+
    "\7\0\13\60\4\0\1\60\1\0\4\60\1\u015e\25\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\21\60"+
    "\1\u015f\10\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\6\60\1\u0160\23\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\21\60\1\u0161\10\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\24\60\1\u0162\5\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\23\60"+
    "\1\u0163\6\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\13\60\1\u0164\16\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\24\60\1\u0165\5\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\21\60\1\u0166\10\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\23\60"+
    "\1\u0167\6\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\24\60\1\u0168\5\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\23\60\1\u0169\6\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\2\60\1\u016a\27\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\4\60"+
    "\1\u016b\25\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\4\60\1\u016c\25\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\23\60\1\u016d\6\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\15\60\1\u016e\14\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\16\60"+
    "\1\u016f\13\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\21\60\1\u0170\10\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\16\60\1\u0171\13\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\3\60\1\u0172\26\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\13\60"+
    "\1\u0173\16\60\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\6\137\1\u0174\23\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\4\137\1\u0175\25\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\4\137\1\u0176\25\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\1\u0177"+
    "\7\137\1\u0178\21\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\16\137\1\u0179\13\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\4\137\1\u017a\25\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\5\137\1\u017b"+
    "\2\137\1\u017c\11\137\1\u017d\7\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\16\137\1\u017e\13\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\13\137\1\u017f"+
    "\16\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\15\137\1\u0180\14\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\23\137\1\u0181\6\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\4\137\1\u0182\25\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\13\137\1\u0183"+
    "\16\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\2\137\1\u0184\27\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\4\137\1\u0185\25\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\14\137\1\u0186\15\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\4\137\1\u0187"+
    "\25\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\10\137\1\u0188\21\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\23\137\1\u0189\6\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\4\137\1\u018a\25\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\21\137\1\u018b"+
    "\10\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\16\137\1\u018c\13\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\27\137\1\u018d\2\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\17\137\1\u018e\12\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\30\137\1\u018f"+
    "\1\137\34\0\1\u0190\1\0\1\u0191\2\0\1\u0192\1\u0193"+
    "\116\0\11\346\26\0\1\u013f\66\0\2\347\35\0\1\u0140"+
    "\66\0\7\353\30\0\1\u0141\66\0\11\u0194\7\0\4\u0194"+
    "\15\0\6\u0194\57\0\11\354\7\0\4\354\13\0\1\u0143"+
    "\1\0\6\354\57\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\22\60\1\u0195\7\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\21\60\1\u0196\10\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\3\60\1\u0197\26\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\1\u0198"+
    "\31\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\23\60\1\u0199\6\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\12\60\1\u019a\17\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\7\60\1\u019b\22\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\23\60\1\u019c"+
    "\6\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\10\60\1\u019d\21\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\24\60\1\u019e\5\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\21\60\1\u019f\10\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\13\60\1\u01a0"+
    "\16\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\21\60\1\u01a1\10\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\4\60\1\u01a2\25\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\23\60\1\u01a3\6\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\23\60\1\u01a4"+
    "\6\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\1\u01a5\31\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\21\60\1\u01a6\10\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\21\60\1\u01a7\10\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\15\60\1\u01a8\14\60"+
    "\33\0\2\60\1\u01a9\6\60\7\0\13\60\4\0\1\60"+
    "\1\0\32\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\21\60\1\u01aa\10\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\16\60\1\u01ab\13\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\13\60\1\u01ac\16\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\2\60"+
    "\1\u01ad\27\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\21\60\1\u01ae\10\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\23\60\1\u01af\6\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\10\60\1\u01b0\21\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\2\60"+
    "\1\u01b1\27\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\2\60\1\u01b2\27\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\1\u01b3\31\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\3\60\1\u01b4\4\60\1\u01b5"+
    "\21\60\33\0\1\60\1\u01b6\7\60\7\0\13\60\4\0"+
    "\1\60\1\0\32\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\6\60\1\u01b7\23\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\15\60\1\u01b8\14\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\21\60\1\u01b9"+
    "\10\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\4\60\1\u01ba\25\60\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\15\137\1\u01bb\14\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\21\137\1\u01bc\10\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\24\137\1\u01bd"+
    "\5\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\15\137\1\u01be\14\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\16\137\1\u01bf\13\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\5\137\1\u01c0\24\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\26\137\1\u01c1"+
    "\3\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\21\137\1\u01c2\10\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\23\137\1\u01c3\6\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\1\u01c4\31\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\24\137\1\u01c5\5\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\1\u01c6"+
    "\31\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\24\137\1\u01c7\5\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\16\137\1\u01c8\13\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\16\137\1\u01c9\13\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\4\137\1\u01ca"+
    "\25\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\16\137\1\u01cb\13\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\15\137\1\u01cc\14\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\2\137\1\u01cd\27\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\5\137\1\u01ce"+
    "\10\137\1\u01cf\13\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\6\137\1\u01d0\23\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\15\137\1\u01d1\6\137\1\u01d2"+
    "\5\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\17\137\1\u01d3\12\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\13\137\1\u01d4\16\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\17\137\1\u01d5\12\137\35\0"+
    "\1\u01d6\3\0\1\u0193\121\0\1\u0193\127\0\1\u0193\121\0"+
    "\11\u0194\7\0\4\u0194\3\0\1\170\7\0\1\u01d7\1\0"+
    "\6\u0194\11\0\1\170\45\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\23\60\1\u01d8\6\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\4\60\1\u01d9\25\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\23\60\1\u01da"+
    "\6\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\21\60\1\u01db\10\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\15\60\1\u01dc\14\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\13\60\1\u01dd\16\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\4\60\1\u01de"+
    "\25\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\15\60\1\u01df\14\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\3\60\1\u01e0\26\60\33\0\1\60\1\u01e1"+
    "\7\60\7\0\13\60\4\0\1\60\1\0\32\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\2\60\1\u01e2"+
    "\27\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\23\60\1\u01e3\6\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\4\60\1\u01e4\25\60\33\0\7\60\1\u01e5"+
    "\1\60\7\0\13\60\4\0\1\60\1\0\32\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\5\60\1\u01e6"+
    "\24\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\4\60\1\u01e7\25\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\1\u01e8\31\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\15\60\1\u01e9\14\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\2\60\1\u01ea\27\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\23\60"+
    "\1\u01eb\6\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\7\60\1\u01ec\22\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\13\60\1\u01ed\16\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\4\60\1\u01ee\25\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\3\60"+
    "\1\u01ef\26\60\33\0\2\60\1\u01f0\6\60\7\0\13\60"+
    "\4\0\1\60\1\0\32\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\23\60\1\u01f1\6\60\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\16\137\1\u01f2\13\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\23\137"+
    "\1\u01f3\6\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\13\137\1\u01f4\16\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\4\137\1\u01f5\25\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\21\137\1\u01f6\10\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\10\137"+
    "\1\u01f7\21\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\30\137\1\u01f8\1\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\14\137\1\u01f9\15\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\21\137\1\u01fa\10\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\2\137"+
    "\1\u01fb\27\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\3\137\1\u01fc\26\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\15\137\1\u01fd\14\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\5\137\1\u01fe\24\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\16\137"+
    "\1\u01ff\13\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\5\137\1\u0200\24\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\6\137\1\u0201\23\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\7\137\1\u0202\22\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\21\137"+
    "\1\u0203\10\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\5\137\1\u0204\24\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\22\137\1\u0205\7\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\15\137\1\u0206\14\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\21\137"+
    "\1\u0207\10\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\1\u0208\31\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\4\137\1\u0209\25\137\42\0\1\u0193\116\0"+
    "\11\u0194\7\0\4\u0194\13\0\1\u01d7\1\0\6\u0194\57\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\5\60\1\u020a"+
    "\24\60\33\0\1\60\1\u020b\7\60\7\0\13\60\4\0"+
    "\1\60\1\0\32\60\33\0\11\60\7\0\13\60\4\0"+
    "\1\60\1\0\24\60\1\u020c\5\60\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\24\60\1\u020d\5\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\23\60\1\u020e"+
    "\6\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\4\60\1\u020f\25\60\33\0\2\60\1\u0210\3\60\1\u0211"+
    "\2\60\7\0\13\60\4\0\1\60\1\0\32\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\7\60\1\u0212"+
    "\22\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\1\u0213\31\60\33\0\11\60\7\0\13\60\4\0\1\60"+
    "\1\0\22\60\1\u0214\7\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\5\60\1\u0215\24\60\33\0\7\60"+
    "\1\u0216\1\60\7\0\13\60\4\0\1\60\1\0\32\60"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\5\137"+
    "\1\u0217\24\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\23\137\1\u0218\6\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\3\137\1\u0219\26\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\4\137\1\u021a\25\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\23\137"+
    "\1\u021b\6\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\17\137\1\u021c\12\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\4\137\1\u021d\25\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\4\137\1\u021e\25\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\7\137"+
    "\1\u021f\22\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\4\137\1\u0220\25\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\22\137\1\u0221\7\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\5\137\1\u0222\24\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\10\137"+
    "\1\u0223\21\137\33\0\11\137\7\0\13\137\4\0\1\137"+
    "\1\0\16\137\1\u0224\13\137\33\0\11\137\7\0\13\137"+
    "\4\0\1\137\1\0\23\137\1\u0225\6\137\33\0\11\137"+
    "\7\0\13\137\4\0\1\137\1\0\23\137\1\u0226\6\137"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\23\137"+
    "\1\u0227\6\137\33\0\6\60\1\u0228\2\60\7\0\13\60"+
    "\4\0\1\60\1\0\32\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\2\60\1\u0229\27\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\4\60\1\u022a\25\60"+
    "\33\0\11\60\7\0\13\60\4\0\1\60\1\0\5\60"+
    "\1\u022b\24\60\33\0\7\60\1\u022c\1\60\7\0\13\60"+
    "\4\0\1\60\1\0\32\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\u022d\1\0\32\60\33\0\11\60\7\0\13\60"+
    "\4\0\1\60\1\0\2\60\1\u022e\27\60\33\0\11\60"+
    "\7\0\13\60\4\0\1\60\1\0\4\60\1\u022f\25\60"+
    "\33\0\11\137\7\0\13\137\4\0\1\137\1\0\1\u0230"+
    "\31\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\2\137\1\u0231\27\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\4\137\1\u0232\25\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\16\137\1\u0233\13\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\23\137\1\u0234"+
    "\6\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\5\137\1\u0235\24\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\14\137\1\u0236\15\137\33\0\11\60\7\0"+
    "\13\60\4\0\1\60\1\0\23\60\1\u0237\6\60\33\0"+
    "\11\60\7\0\13\60\4\0\1\60\1\0\21\60\1\u0238"+
    "\10\60\33\0\11\60\7\0\13\60\4\0\1\60\1\0"+
    "\4\60\1\u0239\25\60\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\2\137\1\u023a\27\137\33\0\11\137\7\0"+
    "\13\137\4\0\1\137\1\0\7\137\1\u023b\22\137\33\0"+
    "\11\137\7\0\13\137\4\0\1\137\1\0\5\137\1\u023c"+
    "\24\137\33\0\11\137\7\0\13\137\4\0\1\137\1\0"+
    "\30\137\1\u023d\1\137\33\0\11\137\7\0\13\137\4\0"+
    "\1\137\1\0\7\137\1\u023e\22\137\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[36464];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\1\11\4\1\3\11\2\1\1\11"+
    "\6\1\1\11\7\1\1\11\2\1\1\11\22\1\1\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\5\1\2\11"+
    "\1\1\1\0\1\1\1\0\1\11\2\1\1\0\14\1"+
    "\1\11\1\1\2\11\1\1\3\11\1\1\1\11\1\1"+
    "\1\11\3\0\1\1\1\0\1\1\2\0\2\11\1\1"+
    "\4\11\1\1\2\11\2\1\1\0\2\1\2\11\1\0"+
    "\57\1\4\11\1\1\3\11\3\0\31\1\3\11\2\1"+
    "\1\0\1\1\1\11\2\1\3\11\64\1\1\11\32\1"+
    "\5\0\114\1\3\0\1\11\1\0\101\1\2\0\147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int commentNesting = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  C3Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 192: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 193: break;
          case 3:
            { return C3Types.BANG;
            }
          // fall through
          case 194: break;
          case 4:
            { yybegin(IN_STRING);
            }
          // fall through
          case 195: break;
          case 5:
            { return C3Types.MOD;
            }
          // fall through
          case 196: break;
          case 6:
            { return C3Types.AMP;
            }
          // fall through
          case 197: break;
          case 7:
            { yybegin(IN_CHAR);
            }
          // fall through
          case 198: break;
          case 8:
            { return C3Types.LP;
            }
          // fall through
          case 199: break;
          case 9:
            { return C3Types.RP;
            }
          // fall through
          case 200: break;
          case 10:
            { return C3Types.STAR;
            }
          // fall through
          case 201: break;
          case 11:
            { return C3Types.PLUS;
            }
          // fall through
          case 202: break;
          case 12:
            { return C3Types.COMMA;
            }
          // fall through
          case 203: break;
          case 13:
            { return C3Types.MINUS;
            }
          // fall through
          case 204: break;
          case 14:
            { return C3Types.DOT;
            }
          // fall through
          case 205: break;
          case 15:
            { return C3Types.DIV;
            }
          // fall through
          case 206: break;
          case 16:
            { return C3Types.INT_LITERAL;
            }
          // fall through
          case 207: break;
          case 17:
            { return C3Types.COLON;
            }
          // fall through
          case 208: break;
          case 18:
            { return C3Types.EOS;
            }
          // fall through
          case 209: break;
          case 19:
            { return C3Types.LT_OP;
            }
          // fall through
          case 210: break;
          case 20:
            { return C3Types.EQ;
            }
          // fall through
          case 211: break;
          case 21:
            { return C3Types.GT_OP;
            }
          // fall through
          case 212: break;
          case 22:
            { return C3Types.QUESTION;
            }
          // fall through
          case 213: break;
          case 23:
            { return C3Types.CONST_IDENT;
            }
          // fall through
          case 214: break;
          case 24:
            { return C3Types.LBT;
            }
          // fall through
          case 215: break;
          case 25:
            { return C3Types.RBT;
            }
          // fall through
          case 216: break;
          case 26:
            { return C3Types.BIT_XOR;
            }
          // fall through
          case 217: break;
          case 27:
            { return C3Types.UNDERSCORE;
            }
          // fall through
          case 218: break;
          case 28:
            { yybegin(IN_RAW_STRING);
            }
          // fall through
          case 219: break;
          case 29:
            { return C3Types.IDENT;
            }
          // fall through
          case 220: break;
          case 30:
            { return C3Types.LB;
            }
          // fall through
          case 221: break;
          case 31:
            { return C3Types.BIT_OR;
            }
          // fall through
          case 222: break;
          case 32:
            { return C3Types.RB;
            }
          // fall through
          case 223: break;
          case 33:
            { return C3Types.BIT_NOT;
            }
          // fall through
          case 224: break;
          case 34:
            { return C3ParserDefinition.BLOCK_COMMENT;
            }
          // fall through
          case 225: break;
          case 35:
            { 
            }
          // fall through
          case 226: break;
          case 36:
            { yybegin(YYINITIAL); return C3Types.STRING_LIT;
            }
          // fall through
          case 227: break;
          case 37:
            { return C3ParserDefinition.DOC_COMMENT;
            }
          // fall through
          case 228: break;
          case 38:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 229: break;
          case 39:
            { yybegin(YYINITIAL); return C3Types.CHAR_LIT;
            }
          // fall through
          case 230: break;
          case 40:
            { yybegin(YYINITIAL); return C3Types.BYTES;
            }
          // fall through
          case 231: break;
          case 41:
            { return C3Types.BANGBANG;
            }
          // fall through
          case 232: break;
          case 42:
            { return C3Types.NE_OP;
            }
          // fall through
          case 233: break;
          case 43:
            { return C3Types.HASH_IDENT;
            }
          // fall through
          case 234: break;
          case 44:
            { return C3Types.KW_CT_TYPEFROM;
            }
          // fall through
          case 235: break;
          case 45:
            { return C3Types.CT_CONST_IDENT;
            }
          // fall through
          case 236: break;
          case 46:
            { return C3Types.KW_CT_TYPEOF;
            }
          // fall through
          case 237: break;
          case 47:
            { return C3Types.CT_IDENT;
            }
          // fall through
          case 238: break;
          case 48:
            { return C3Types.MOD_ASSIGN;
            }
          // fall through
          case 239: break;
          case 49:
            { return C3Types.AND;
            }
          // fall through
          case 240: break;
          case 50:
            { return C3Types.BIT_AND_ASSIGN;
            }
          // fall through
          case 241: break;
          case 51:
            { return C3Types.MULT_ASSIGN;
            }
          // fall through
          case 242: break;
          case 52:
            { return C3Types.PLUSPLUS;
            }
          // fall through
          case 243: break;
          case 53:
            { return C3Types.PLUS_ASSIGN;
            }
          // fall through
          case 244: break;
          case 54:
            { return C3Types.MINUSMINUS;
            }
          // fall through
          case 245: break;
          case 55:
            { return C3Types.MINUS_ASSIGN;
            }
          // fall through
          case 246: break;
          case 56:
            { return C3Types.DOTDOT;
            }
          // fall through
          case 247: break;
          case 57:
            { yybegin(IN_COMMENT); commentNesting = 1; return C3ParserDefinition.BLOCK_COMMENT;
            }
          // fall through
          case 248: break;
          case 58:
            { return C3ParserDefinition.LINE_COMMENT;
            }
          // fall through
          case 249: break;
          case 59:
            { return C3Types.DIV_ASSIGN;
            }
          // fall through
          case 250: break;
          case 60:
            { return C3Types.SCOPE;
            }
          // fall through
          case 251: break;
          case 61:
            { yybegin(IN_DOC_COMMENT); return C3ParserDefinition.DOC_COMMENT;
            }
          // fall through
          case 252: break;
          case 62:
            { return C3Types.SHL;
            }
          // fall through
          case 253: break;
          case 63:
            { return C3Types.LE_OP;
            }
          // fall through
          case 254: break;
          case 64:
            { return C3Types.EQ_OP;
            }
          // fall through
          case 255: break;
          case 65:
            { return C3Types.IMPLIES;
            }
          // fall through
          case 256: break;
          case 66:
            { return C3Types.GE_OP;
            }
          // fall through
          case 257: break;
          case 67:
            { return C3Types.SHR;
            }
          // fall through
          case 258: break;
          case 68:
            { return C3Types.RVEC;
            }
          // fall through
          case 259: break;
          case 69:
            { return C3Types.ELVIS;
            }
          // fall through
          case 260: break;
          case 70:
            { return C3Types.OPTELSE;
            }
          // fall through
          case 261: break;
          case 71:
            { return C3Types.AT_IDENT;
            }
          // fall through
          case 262: break;
          case 72:
            { return C3Types.TYPE_IDENT;
            }
          // fall through
          case 263: break;
          case 73:
            { return C3Types.LVEC;
            }
          // fall through
          case 264: break;
          case 74:
            { return C3Types.BIT_XOR_ASSIGN;
            }
          // fall through
          case 265: break;
          case 75:
            { return C3Types.KW_DO;
            }
          // fall through
          case 266: break;
          case 76:
            { return C3Types.KW_FN;
            }
          // fall through
          case 267: break;
          case 77:
            { return C3Types.KW_IF;
            }
          // fall through
          case 268: break;
          case 78:
            { yybegin(IN_BYTES_STRING);
            }
          // fall through
          case 269: break;
          case 79:
            { yybegin(IN_BYTES_CHAR);
            }
          // fall through
          case 270: break;
          case 80:
            { yybegin(IN_BYTES_RAW_STRING);
            }
          // fall through
          case 271: break;
          case 81:
            { return C3Types.BIT_OR_ASSIGN;
            }
          // fall through
          case 272: break;
          case 82:
            { return C3Types.OR;
            }
          // fall through
          case 273: break;
          case 83:
            { if (--commentNesting == 0) { yybegin(YYINITIAL); return C3ParserDefinition.BLOCK_COMMENT; }
            }
          // fall through
          case 274: break;
          case 84:
            { commentNesting++; return C3ParserDefinition.BLOCK_COMMENT;
            }
          // fall through
          case 275: break;
          case 85:
            { yybegin(YYINITIAL); return C3ParserDefinition.DOC_COMMENT;
            }
          // fall through
          case 276: break;
          case 86:
            { return C3Types.BUILTIN_CONST;
            }
          // fall through
          case 277: break;
          case 87:
            { return C3Types.BUILTIN;
            }
          // fall through
          case 278: break;
          case 88:
            { return C3Types.CT_TYPE_IDENT;
            }
          // fall through
          case 279: break;
          case 89:
            { return C3Types.KW_CT_IF;
            }
          // fall through
          case 280: break;
          case 90:
            { return C3Types.CT_AND;
            }
          // fall through
          case 281: break;
          case 91:
            { return C3Types.CT_PLUS;
            }
          // fall through
          case 282: break;
          case 92:
            { return C3Types.ELLIPSIS;
            }
          // fall through
          case 283: break;
          case 93:
            { return C3Types.FLOAT_LITERAL;
            }
          // fall through
          case 284: break;
          case 94:
            { return C3Types.SHL_ASSIGN;
            }
          // fall through
          case 285: break;
          case 95:
            { return C3Types.SHR_ASSIGN;
            }
          // fall through
          case 286: break;
          case 96:
            { return C3Types.CT_TERNARY;
            }
          // fall through
          case 287: break;
          case 97:
            { return C3Types.AT_TYPE_IDENT;
            }
          // fall through
          case 288: break;
          case 98:
            { return C3Types.KW_ANY;
            }
          // fall through
          case 289: break;
          case 99:
            { return C3Types.KW_ASM;
            }
          // fall through
          case 290: break;
          case 100:
            { return C3Types.KW_FOR;
            }
          // fall through
          case 291: break;
          case 101:
            { return C3Types.KW_INT;
            }
          // fall through
          case 292: break;
          case 102:
            { return C3Types.KW_ISZ;
            }
          // fall through
          case 293: break;
          case 103:
            { return C3Types.KW_TRY;
            }
          // fall through
          case 294: break;
          case 104:
            { return C3Types.KW_USZ;
            }
          // fall through
          case 295: break;
          case 105:
            { return C3Types.KW_VAR;
            }
          // fall through
          case 296: break;
          case 106:
            { return C3Types.CT_OR;
            }
          // fall through
          case 297: break;
          case 107:
            { return C3Types.KW_CT_FOR;
            }
          // fall through
          case 298: break;
          case 108:
            { return C3Types.KW_BOOL;
            }
          // fall through
          case 299: break;
          case 109:
            { return C3Types.KW_CASE;
            }
          // fall through
          case 300: break;
          case 110:
            { return C3Types.KW_CHAR;
            }
          // fall through
          case 301: break;
          case 111:
            { return C3Types.KW_ELSE;
            }
          // fall through
          case 302: break;
          case 112:
            { return C3Types.KW_ENUM;
            }
          // fall through
          case 303: break;
          case 113:
            { return C3Types.KW_IPTR;
            }
          // fall through
          case 304: break;
          case 114:
            { return C3Types.KW_LONG;
            }
          // fall through
          case 305: break;
          case 115:
            { return C3Types.KW_NULL;
            }
          // fall through
          case 306: break;
          case 116:
            { return C3Types.KW_TRUE;
            }
          // fall through
          case 307: break;
          case 117:
            { return C3Types.KW_UINT;
            }
          // fall through
          case 308: break;
          case 118:
            { return C3Types.KW_UPTR;
            }
          // fall through
          case 309: break;
          case 119:
            { return C3Types.KW_VOID;
            }
          // fall through
          case 310: break;
          case 120:
            { return C3Types.KW_CT_CASE;
            }
          // fall through
          case 311: break;
          case 121:
            { return C3Types.KW_CT_ECHO;
            }
          // fall through
          case 312: break;
          case 122:
            { return C3Types.KW_CT_ELSE;
            }
          // fall through
          case 313: break;
          case 123:
            { return C3Types.KW_CT_EVAL;
            }
          // fall through
          case 314: break;
          case 124:
            { return C3Types.KW_ALIAS;
            }
          // fall through
          case 315: break;
          case 125:
            { return C3Types.KW_BREAK;
            }
          // fall through
          case 316: break;
          case 126:
            { return C3Types.KW_CATCH;
            }
          // fall through
          case 317: break;
          case 127:
            { return C3Types.KW_CONST;
            }
          // fall through
          case 318: break;
          case 128:
            { return C3Types.KW_DEFER;
            }
          // fall through
          case 319: break;
          case 129:
            { return C3Types.KW_FALSE;
            }
          // fall through
          case 320: break;
          case 130:
            { return C3Types.KW_FAULT;
            }
          // fall through
          case 321: break;
          case 131:
            { return C3Types.KW_FLOAT;
            }
          // fall through
          case 322: break;
          case 132:
            { return C3Types.KW_ICHAR;
            }
          // fall through
          case 323: break;
          case 133:
            { return C3Types.KW_MACRO;
            }
          // fall through
          case 324: break;
          case 134:
            { return C3Types.KW_SHORT;
            }
          // fall through
          case 325: break;
          case 135:
            { return C3Types.KW_ULONG;
            }
          // fall through
          case 326: break;
          case 136:
            { return C3Types.KW_UNION;
            }
          // fall through
          case 327: break;
          case 137:
            { return C3Types.KW_WHILE;
            }
          // fall through
          case 328: break;
          case 138:
            { return C3Types.KW_CT_ENDIF;
            }
          // fall through
          case 329: break;
          case 139:
            { return C3Types.KW_CT_ERROR;
            }
          // fall through
          case 330: break;
          case 140:
            { return C3Types.KW_CT_VAARG;
            }
          // fall through
          case 331: break;
          case 141:
            { return C3Types.KW_ASSERT;
            }
          // fall through
          case 332: break;
          case 142:
            { return C3Types.KW_DOUBLE;
            }
          // fall through
          case 333: break;
          case 143:
            { return C3Types.KW_EXTERN;
            }
          // fall through
          case 334: break;
          case 144:
            { return C3Types.KW_IMPORT;
            }
          // fall through
          case 335: break;
          case 145:
            { return C3Types.KW_INLINE;
            }
          // fall through
          case 336: break;
          case 146:
            { return C3Types.KW_INT128;
            }
          // fall through
          case 337: break;
          case 147:
            { return C3Types.KW_MODULE;
            }
          // fall through
          case 338: break;
          case 148:
            { return C3Types.KW_RETURN;
            }
          // fall through
          case 339: break;
          case 149:
            { return C3Types.KW_STATIC;
            }
          // fall through
          case 340: break;
          case 150:
            { return C3Types.KW_STRUCT;
            }
          // fall through
          case 341: break;
          case 151:
            { return C3Types.KW_SWITCH;
            }
          // fall through
          case 342: break;
          case 152:
            { return C3Types.KW_TLOCAL;
            }
          // fall through
          case 343: break;
          case 153:
            { return C3Types.KW_TYPEID;
            }
          // fall through
          case 344: break;
          case 154:
            { return C3Types.KW_USHORT;
            }
          // fall through
          case 345: break;
          case 155:
            { return C3Types.KW_CT_ASSERT;
            }
          // fall through
          case 346: break;
          case 156:
            { return C3Types.KW_CT_ENDFOR;
            }
          // fall through
          case 347: break;
          case 157:
            { return C3Types.KW_CT_NAMEOF;
            }
          // fall through
          case 348: break;
          case 158:
            { return C3Types.KW_CT_SIZEOF;
            }
          // fall through
          case 349: break;
          case 159:
            { return C3Types.KW_CT_SWITCH;
            }
          // fall through
          case 350: break;
          case 160:
            { return C3Types.KW_CT_VAEXPR;
            }
          // fall through
          case 351: break;
          case 161:
            { return C3Types.KW_CT_VATYPE;
            }
          // fall through
          case 352: break;
          case 162:
            { return C3Types.KW_ATTRDEF;
            }
          // fall through
          case 353: break;
          case 163:
            { return C3Types.KW_DEFAULT;
            }
          // fall through
          case 354: break;
          case 164:
            { return C3Types.KW_FLOAT16;
            }
          // fall through
          case 355: break;
          case 165:
            { return C3Types.KW_FOREACH;
            }
          // fall through
          case 356: break;
          case 166:
            { return C3Types.KW_TYPEDEF;
            }
          // fall through
          case 357: break;
          case 167:
            { return C3Types.KW_UINT128;
            }
          // fall through
          case 358: break;
          case 168:
            { return C3Types.KW_CT_ALIGNOF;
            }
          // fall through
          case 359: break;
          case 169:
            { return C3Types.KW_CT_DEFAULT;
            }
          // fall through
          case 360: break;
          case 170:
            { return C3Types.KW_CT_DEFINED;
            }
          // fall through
          case 361: break;
          case 171:
            { return C3Types.KW_CT_FEATURE;
            }
          // fall through
          case 362: break;
          case 172:
            { return C3Types.KW_CT_FOREACH;
            }
          // fall through
          case 363: break;
          case 173:
            { return C3Types.KW_CT_INCLUDE;
            }
          // fall through
          case 364: break;
          case 174:
            { return C3Types.KW_CT_QNAMEOF;
            }
          // fall through
          case 365: break;
          case 175:
            { return C3Types.KW_CT_VACONST;
            }
          // fall through
          case 366: break;
          case 176:
            { return C3Types.KW_CT_VACOUNT;
            }
          // fall through
          case 367: break;
          case 177:
            { return C3Types.KW_CT_VASPLAT;
            }
          // fall through
          case 368: break;
          case 178:
            { return C3Types.KW_BFLOAT16;
            }
          // fall through
          case 369: break;
          case 179:
            { return C3Types.KW_CONTINUE;
            }
          // fall through
          case 370: break;
          case 180:
            { return C3Types.KW_FAULTDEF;
            }
          // fall through
          case 371: break;
          case 181:
            { return C3Types.KW_FLOAT128;
            }
          // fall through
          case 372: break;
          case 182:
            { return C3Types.KW_NEXTCASE;
            }
          // fall through
          case 373: break;
          case 183:
            { return C3Types.KW_CT_EVALTYPE;
            }
          // fall through
          case 374: break;
          case 184:
            { return C3Types.KW_CT_IS_CONST;
            }
          // fall through
          case 375: break;
          case 185:
            { return C3Types.KW_BITSTRUCT;
            }
          // fall through
          case 376: break;
          case 186:
            { return C3Types.KW_FOREACH_R;
            }
          // fall through
          case 377: break;
          case 187:
            { return C3Types.KW_INTERFACE;
            }
          // fall through
          case 378: break;
          case 188:
            { return C3Types.KW_CT_ENDSWITCH;
            }
          // fall through
          case 379: break;
          case 189:
            { return C3Types.KW_CT_EXTNAMEOF;
            }
          // fall through
          case 380: break;
          case 190:
            { return C3Types.KW_CT_STRINGIFY;
            }
          // fall through
          case 381: break;
          case 191:
            { return C3Types.KW_CT_ENDFOREACH;
            }
          // fall through
          case 382: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
